{"version":3,"sources":["dbhelper.js","restaurant_info.js"],"names":["map","altTags","1","2","3","4","5","6","7","8","9","10","DBHelper","callback","dbPromise","idb","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","then","db","transaction","objectStore","getAll","restaurants","navigator","onLine","fetch","DATABASE_URL","res","json","forEach","restaurant","id","alt","is_favorite","document","getElementById","console","log","name","restaurantsStore","put","fetchRestaurants","error","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","google","maps","Marker","position","latlng","title","url","urlForRestaurant","animation","Animation","DROP","fetchRestaurantFromURL","self","Map","zoom","center","scrollwheel","fillBreadcrumb","mapMarkerForRestaurant","addEventListener","className","fillRestaurantHTML","arguments","length","undefined","innerHTML","image","button","src","imageUrlForRestaurant","imgSrcset","smallImageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","createReviewHTML","review","li","insertAdjacentHTML","date","reviewDate","Date","createdAt","rating","comments","breadcrumb","getParameterByName","window","location","href","RegExp","decodeURIComponent","replace"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["const altTags = {\r\n  1: \"bustling chinese restaurant\",\r\n  2: \"rounded pizza\",\r\n  3: \"shiny empty dining area\",\r\n  4: \"entrance of a restaurant with neon signs\",\r\n  5: \"crowded restaurant with an open view of the kitchen\",\r\n  6: \"crowded familly barbacue restaurant\",\r\n  7: \"entrance to a burger place\",\r\n  8: \"entrance to the dutch with a blossomed tree next to it\",\r\n  9: \"people eating ramen noodles\",\r\n  10: \"empty restaurant with white bar stools\"\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your servers port\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n\r\n  static fetchRestaurants(callback) {\r\n\r\n    // Opening a database\r\n    const dbPromise = idb.open(\"rr-db\", 1, (upgradeDb) => {\r\n      // checks if the object store already exists\r\n      if (!upgradeDb.objectStoreNames.contains('restaurants')) {\r\n        const idOS = upgradeDb.createObjectStore('restaurants', {\r\n          keyPath: 'id'\r\n        })\r\n        idOS.createIndex('id', 'id', {\r\n          unique: true\r\n        });\r\n      }\r\n    });\r\n\r\n   \r\n    dbPromise.then((db) => {\r\n      const tx = db.transaction('restaurants', 'readwrite');\r\n      const restaurantsStore = tx.objectStore('restaurants');\r\n      return restaurantsStore.getAll()\r\n    }).then((restaurants) => {\r\n      if (!navigator.onLine) {\r\n        callback(null, restaurants)\r\n      } else {\r\n        fetch(`${DBHelper.DATABASE_URL}/restaurants`)\r\n          .then((res) => {\r\n            debugger;\r\n            return res.json();\r\n          }).then((res) => {\r\n            debugger;\r\n            const restaurants = res;\r\n            restaurants.forEach((restaurant) => {\r\n              if (restaurant.id) {\r\n                restaurant.alt = altTags[restaurant.id]\r\n              }\r\n\r\n              if(restaurant.is_favorite === \"false\" ) {\r\n                const button = document.getElementById('favorite-button');\r\n      \r\n                debugger; \r\n                console.log('restaurant is faulse ' + restaurant.name)\r\n              } else {\r\n                console.log('Restaurant is true ' + restaurant.name)\r\n              }\r\n            })\r\n            dbPromise.then((db) => {\r\n              const tx = db.transaction('restaurants', 'readwrite');\r\n              const restaurantsStore = tx.objectStore('restaurants');\r\n              restaurants.forEach(restaurant => restaurantsStore.put(restaurant))\r\n            })\r\n            callback(null, restaurants);\r\n          })\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`img/${restaurant.id}.webp`);\r\n  }\r\n\r\n\r\n  static smallImageUrlForRestaurant(restaurant) {\r\n    return (`\r\n     img/${restaurant.id}_w_300.webp 300w,\r\n     img/${restaurant.id}_w_433.webp 433w,  \r\n     img/${restaurant.id}_w_653.webp 653w\r\n    `)\r\n  }\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n\r\n}","let restaurant;\r\nvar map;\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nconst initMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n}\r\n\r\ndocument.getElementById('mapButton').addEventListener('click', () => {\r\n  document.getElementById('map').className = 'open';\r\n}); \r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img'\r\n  image.alt = restaurant.alt;\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  const imgSrcset = DBHelper.smallImageUrlForRestaurant(restaurant);\r\n  image.srcset = imgSrcset;\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  /*\r\n  fillReviewsHTML();\r\n  */\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  \r\n\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h2');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  if (!reviews) {\r\n\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n}\r\n\r\n */\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n  debugger;\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.insertAdjacentHTML('beforeend', review.name);\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('p');\r\n  const reviewDate = new Date(review.createdAt);\r\n  date.insertAdjacentHTML('beforeend', reviewDate.toDateString());\r\n  li.appendChild(date);\r\n\r\n\r\n  const rating = document.createElement('p');\r\n  rating.insertAdjacentHTML('beforeend', `Rating: ${review.rating}`);\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n\r\n  comments.insertAdjacentHTML('beforeend', review.comments);\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n\r\n"]}