{"version":3,"sources":["dbhelper.js","main.js"],"names":["map","altTags","1","2","3","4","5","6","7","8","9","10","DBHelper","callback","dbPromise","idb","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","then","db","transaction","objectStore","getAll","restaurants","navigator","onLine","fetch","DATABASE_URL","res","json","forEach","restaurant","id","alt","is_favorite","document","getElementById","console","log","name","restaurantsStore","put","fetchRestaurants","error","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","google","maps","Marker","position","latlng","title","url","urlForRestaurant","animation","Animation","DROP","markers","addEventListener","event","fetchNeighborhoods","fetchCuisines","idOS","self","fillNeighborhoodsHTML","tx","arguments","length","undefined","select","option","value","fillCuisinesHTML","innerHTML","initMap","Map","zoom","lat","lng","scrollwheel","updateRestaurants","className","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","fillRestaurantsHTML","resetRestaurants","m","setMap","ul","append","createRestaurantHTML","li","createElement","favoriteButton","setAttribute","onclick","method","location","href","appendChild","placeHolder","dataset","srcset","smallImageUrlForRestaurant","tabIndex","image","src","address","more","marker","mapMarkerForRestaurant","addListener","window","push"],"mappings":"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","file":"main.js","sourcesContent":["const altTags = {\r\n  1: \"bustling chinese restaurant\",\r\n  2: \"rounded pizza\",\r\n  3: \"shiny empty dining area\",\r\n  4: \"entrance of a restaurant with neon signs\",\r\n  5: \"crowded restaurant with an open view of the kitchen\",\r\n  6: \"crowded familly barbacue restaurant\",\r\n  7: \"entrance to a burger place\",\r\n  8: \"entrance to the dutch with a blossomed tree next to it\",\r\n  9: \"people eating ramen noodles\",\r\n  10: \"empty restaurant with white bar stools\"\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your servers port\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n\r\n  static fetchRestaurants(callback) {\r\n\r\n    // Opening a database\r\n    const dbPromise = idb.open(\"rr-db\", 1, (upgradeDb) => {\r\n      // checks if the object store already exists\r\n      if (!upgradeDb.objectStoreNames.contains('restaurants')) {\r\n        const idOS = upgradeDb.createObjectStore('restaurants', {\r\n          keyPath: 'id'\r\n        })\r\n        idOS.createIndex('id', 'id', {\r\n          unique: true\r\n        });\r\n      }\r\n    });\r\n\r\n   \r\n    dbPromise.then((db) => {\r\n      const tx = db.transaction('restaurants', 'readwrite');\r\n      const restaurantsStore = tx.objectStore('restaurants');\r\n      return restaurantsStore.getAll()\r\n    }).then((restaurants) => {\r\n      if (!navigator.onLine) {\r\n        callback(null, restaurants)\r\n      } else {\r\n        fetch(`${DBHelper.DATABASE_URL}/restaurants`)\r\n          .then((res) => {\r\n            debugger;\r\n            return res.json();\r\n          }).then((res) => {\r\n            debugger;\r\n            const restaurants = res;\r\n            restaurants.forEach((restaurant) => {\r\n              if (restaurant.id) {\r\n                restaurant.alt = altTags[restaurant.id]\r\n              }\r\n\r\n              if(restaurant.is_favorite === \"false\" ) {\r\n                const button = document.getElementById('favorite-button');\r\n      \r\n                debugger; \r\n                console.log('restaurant is faulse ' + restaurant.name)\r\n              } else {\r\n                console.log('Restaurant is true ' + restaurant.name)\r\n              }\r\n            })\r\n            dbPromise.then((db) => {\r\n              const tx = db.transaction('restaurants', 'readwrite');\r\n              const restaurantsStore = tx.objectStore('restaurants');\r\n              restaurants.forEach(restaurant => restaurantsStore.put(restaurant))\r\n            })\r\n            callback(null, restaurants);\r\n          })\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`img/${restaurant.id}.webp`);\r\n  }\r\n\r\n\r\n  static smallImageUrlForRestaurant(restaurant) {\r\n    return (`\r\n     img/${restaurant.id}_w_300.webp 300w,\r\n     img/${restaurant.id}_w_433.webp 433w,  \r\n     img/${restaurant.id}_w_653.webp 653w\r\n    `)\r\n  }\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n\r\n}","\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = []\r\n\r\n// Opening a database\r\nconst dbPromise = idb.open(\"rr-db\", 1, (upgradeDb) => {\r\n  // checks if the object store already exists\r\n  if (!upgradeDb.objectStoreNames.contains('restaurants')) {\r\n    const idOS = upgradeDb.createObjectStore('restaurants', {\r\n      keyPath: 'id'\r\n    })\r\n    idOS.createIndex('id', 'id', {\r\n      unique: true\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\n\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nconst initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n}\r\n\r\ndocument.getElementById('mapButton').addEventListener('click', () => {\r\n  document.getElementById('map').className = 'open';\r\n});\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  const favoriteButton = document.createElement('button');\r\n  favoriteButton.value = restaurant.is_favorite;\r\n  if(favoriteButton.value === 'false' || favoriteButton.value === false) {\r\n    favoriteButton.innerHTML = `<img src = img/gray-heart.png alt = 'favorite button image'>`;\r\n    favoriteButton.setAttribute('Aria-label', 'Set as favorite')\r\n    \r\n  } else {\r\n    favoriteButton.innerHTML = `<img src = img/orange-heart.png>`;\r\n    favoriteButton.setAttribute('Aria-label', 'Remove from favorites')\r\n  }\r\n   \r\n  favoriteButton.onclick = function() {\r\n    debugger;\r\n    if(navigator.onLine) {\r\n      if(favoriteButton.value === 'false'  || favoriteButton.value === false) {\r\n        debugger;\r\n        favoriteButton.value = 'true';\r\n        favoriteButton.setAttribute('Aria-label', 'Remove from favorites')\r\n        debugger;\r\n        fetch(`http://localhost:1337/restaurants/${restaurant.id}/?is_favorite=true`, {method: 'PUT'})\r\n        .then((res)=> {return res.json})\r\n        .then(() => {\r\n          \r\n          \r\n          location.href=location.href})\r\n        \r\n      } else {\r\n        debugger;\r\n        favoriteButton.value = 'false';\r\n        favoriteButton.setAttribute('Aria-label', 'Set as favorite')\r\n        fetch(`http://localhost:1337/restaurants/${restaurant.id}/?is_favorite=false`, {method: 'PUT'})\r\n        .then((res)=> {return res.json})\r\n        .then(() => {location.href=location.href})\r\n      }\r\n    } else {\r\n     \r\n      if(favoriteButton.value === 'false' || favoriteButton.value === false) {\r\n        favoriteButton.value = 'true';\r\n        favoriteButton.setAttribute('Aria-label', 'Remove from favorites')\r\n        fetch(`http://localhost:1337/restaurants/${restaurant.id}/?is_favorite=true`, {method: 'PUT'})\r\n        .then((res)=> {\r\n          dbPromise.then((db) => {\r\n            const tx = db.transaction('restaurants', 'readwrite')\r\n            const restaurantsStore = tx.objectStore('restaurants');\r\n            restaurant.is_favorite = 'true';\r\n            restaurantsStore.put(restaurant);\r\n          })\r\n          return res.json})\r\n        .then(() => {location.href=location.href})\r\n        \r\n      } else {\r\n        favoriteButton.value = 'false';\r\n        favoriteButton.setAttribute('Aria-label', 'Set as favorite')\r\n        fetch(`http://localhost:1337/restaurants/${restaurant.id}/?is_favorite=false`, {method: 'PUT'})\r\n          .then((res)=> {\r\n            dbPromise.then((db) => {\r\n              const tx = db.transaction('restaurants', 'readwrite')\r\n              const restaurantsStore = tx.objectStore('restaurants');\r\n              restaurant.is_favorite = 'false';\r\n              restaurantsStore.put(restaurant);\r\n            })\r\n            return res.json})\r\n          .then(() => {location.href=location.href})\r\n  \r\n      }\r\n  \r\n    \r\n    }\r\n    }\r\n    \r\n  li.appendChild(favoriteButton)\r\n  const placeHolder = document.createElement('a');\r\n  placeHolder.href =  `img/${restaurant.id}.webp`;\r\n  placeHolder.dataset.srcset = DBHelper.smallImageUrlForRestaurant(restaurant);\r\n  placeHolder.className = `progressive replace`;\r\n  placeHolder.tabIndex = '-1';\r\n\r\n  const image = document.createElement('img');\r\n  image.src = `img/preview/${restaurant.id}.tiny.webp`\r\n  image.className = `preview restaurant-img`;\r\n  image.alt = `${restaurant.alt}`;\r\n  \r\n  li.append(placeHolder);\r\n  placeHolder.append(image);\r\n\r\n  const name = document.createElement('h1');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a'); \r\n  more.innerHTML = 'View Details';\r\n  more.setAttribute('aria-label',`View Details about ${restaurant.name}`);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);  \r\n  li.append(more)\r\n  \r\n\r\n  return li\r\n\r\n}\r\n\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n\r\n\r\n\r\n"]}